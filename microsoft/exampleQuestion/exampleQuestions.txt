Implement a trie (prefix tree) data structure. - done
Find the longest increasing subsequence in an array. - done
Find the longest common subsequence in an array. - done
Find the longest palindromic subsequence in an array. - done
Implement a graph traversal algorithm that visits each node only once. - done in bfs and dfs
Determine if a directed graph has a cycle. - done both directed and undirected
Find the maximum sum subarray in an array. - done
Implement Dijkstra's algorithm to find the shortest path in a weighted graph. - done
Find the kth smallest element in a binary search tree. - done
Implement a binary search tree with the ability to find the median in constant time.
Solve the N-Queens problem, where you have to place N queens on an NÃ—N chessboard without them attacking each other.
Implement an algorithm to calculate the edit distance between two strings. - done
Implement a data structure that supports constant time insertion, deletion, and finding the median. - done
Find the longest common subsequence between two strings. - done
Determine if a binary tree is balanced (i.e., the heights of the two subtrees of any node never differ by more than 1). - done
Find the maximum path sum in a binary tree, where the path can start and end at any node. - done
Implement a data structure for efficiently finding the frequency of elements in a sliding window of a given array. - done
Solve the knapsack problem, where you have to find the maximum value that can be obtained by selecting items from a set without exceeding a given weight.
Implement a suffix tree data structure and use it to find the longest repeated substring in a string.

Implement an efficient algorithm to find all prime numbers up to a given number.
Implement an algorithm to find all possible permutations of a given set of numbers.
Implement an algorithm to reverse the order of words in a sentence.
knapsack
suffix tree
